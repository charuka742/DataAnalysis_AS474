{"frames":[{"func":"lm(transformed_response$price ~ peak_rpm + engine_size + curb_weight + \n    engine_location + width + engine_location, data = autoMobile)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(mf, parent.frame())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(mf, parent.frame())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stats::model.frame(formula = transformed_response$price ~ peak_rpm + \n    engine_size + curb_weight + engine_location + width + engine_location, \n    data = autoMobile, drop.unused.levels = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"model.frame.default(formula = transformed_response$price ~ peak_rpm + \n    engine_size + curb_weight + engine_location + width + engine_location, \n    data = autoMobile, drop.unused.levels = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(predvars, data, env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(predvars, data, env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in transformed_response$price : \n  $ operator is invalid for atomic vectors\n"}