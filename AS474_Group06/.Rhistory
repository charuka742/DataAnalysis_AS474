"highway_mpg",
"price")
autoMobile <- read.csv("../Data/Automobile_data.csv", header = TRUE, col.names = colNames)
attach(autoMobile)
head(autoMobile, 8)
autoMobile[autoMobile == '?'] <- NA
head(autoMobile)
View(autoMobile)
View(autoMobile)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(moments)
library(repr)
library(corrplot)
library(dplyr)
library(purrr)
library(car)
head(autoMobile)
glimpse(autoMobile)
is.na(autoMobile)
sum(is.na(autoMobile))
NAsByFeature <- apply(autoMobile, 2,
function(x){
length(which(is.na(x)))
}
)
NAsByFeature
# Calculate the average of normalized-losses
avg_norm_loss <- mean(as.numeric(autoMobile[["normalized_losses"]]), na.rm = TRUE)
# Print the average of normalized-losses
cat("Average of normalized-losses:", avg_norm_loss, "\n")
# Replace missing values in normalized-losses with the average
autoMobile[["normalized_losses"]][is.na(autoMobile[["normalized_losses"]])] <- avg_norm_loss
head(autoMobile,10)
sum(duplicated(autoMobile))
sum(duplicated(autoMobile))
glimpse(autoMobile)
autoMobile <- autoMobile %>%
na.omit()
NAsByFeature <- sapply(autoMobile, function(x) sum(is.na(x)))
NAsByFeature
autoMobile <- autoMobile %>%
na.omit()
NAsByFeature <- sapply(autoMobile, function(x) sum(is.na(x)))
NAsByFeature
autoMobile <- autoMobile %>%
na.omit()
NAsByFeature <- sapply(autoMobile, function(x) sum(is.na(x)))
NAsByFeature
glimpse(autoMobile)
factorCols = c('make',
'fuel_type',
'aspiration',
'num_of_doors',
'body_style',
'drive_wheels',
'engine_location',
'engine_type',
'num_of_cylinders',
'fuel_system'
)
intCols =c('horsepower',
'symboling',
'normalized_losses',
'curb_weight',
'engine_size',
'city_mpg',
'highway_mpg'
)
numCols = c('bore',
'stroke',
'compression_ratio',
'peak_rpm',
'price',
'wheel_base',
'length',
'width',
'height')
autoMobile <- autoMobile %>%
mutate_at(factorCols, as.factor) %>%
mutate_at(intCols, as.integer) %>%
mutate_at(numCols, as.numeric)
str(autoMobile)
#dealing with the duplicate data
sum(duplicated(autoMobile))
horsepowerTable <- table(autoMobile[['horsepower']])
hist(autoMobile$horsepower, col = topo.colors(length(horsepowerTable)), border = "black",
xlab = "Horsepower", ylab = "Count", main = "Histogram of HORSEPOWER")
str(autoMobile)
summary(autoMobile)
hist(symboling,main= "Histogram for symboling",xlab= "Symboling",ylab= "Frequency", col= "gold",border= "black")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(moments)
library(repr)
library(corrplot)
library(dplyr)
library(purrr)
library(car)
colNames <- c("symboling",
"normalized_losses",
"make",
"fuel_type",
"aspiration",
"num_of_doors",
"body_style",
"drive_wheels",
"engine_location",
"wheel_base",
"length",
"width",
"height",
"curb_weight",
"engine_type",
"num_of_cylinders",
"engine_size",
"fuel_system",
"bore",
"stroke",
"compression_ratio",
"horsepower",
"peak_rpm",
"city_mpg",
"highway_mpg",
"price")
autoMobile <- read.csv("../Data/Automobile_data.csv", header = TRUE, col.names = colNames)
attach(autoMobile)
head(autoMobile)
autoMobile[autoMobile == '?'] <- NA
head(autoMobile)
glimpse(autoMobile)
sum(is.na(autoMobile))
NAsByFeature <- apply(autoMobile, 2,
function(x){
length(which(is.na(x)))
}
)
NAsByFeature
# Calculate the average of normalized-losses
avg_norm_loss <- mean(as.numeric(autoMobile[["normalized_losses"]]), na.rm = TRUE)
# Print the average of normalized-losses
cat("Average of normalized-losses:", avg_norm_loss, "\n")
# Replace missing values in normalized-losses with the average
autoMobile[["normalized_losses"]][is.na(autoMobile[["normalized_losses"]])] <- avg_norm_loss
head(autoMobile,10)
sum(duplicated(autoMobile))
glimpse(autoMobile)
autoMobile <- autoMobile %>%
na.omit()
NAsByFeature <- sapply(autoMobile, function(x) sum(is.na(x)))
NAsByFeature
glimpse(autoMobile)
factorCols = c('make',
'fuel_type',
'aspiration',
'num_of_doors',
'body_style',
'drive_wheels',
'engine_location',
'engine_type',
'num_of_cylinders',
'fuel_system'
)
intCols =c('horsepower',
'symboling',
'normalized_losses',
'curb_weight',
'engine_size',
'city_mpg',
'highway_mpg'
)
numCols = c('bore',
'stroke',
'compression_ratio',
'peak_rpm',
'price',
'wheel_base',
'length',
'width',
'height')
autoMobile <- autoMobile %>%
mutate_at(factorCols, as.factor) %>%
mutate_at(intCols, as.integer) %>%
mutate_at(numCols, as.numeric)
str(autoMobile)
#dealing with the duplicate data
sum(duplicated(autoMobile))
horsepowerTable <- table(autoMobile[['horsepower']])
hist(autoMobile$horsepower, col = topo.colors(length(horsepowerTable)), border = "black",
xlab = "Horsepower", ylab = "Count", main = "Histogram of HORSEPOWER")
str(autoMobile)
summary(autoMobile)
hist(symboling,main= "Histogram for symboling",xlab= "Symboling",ylab= "Frequency", col= "gold",border= "black")
norm_loss <- as.numeric(normalized_losses)
hist(norm_loss, main= "Histogram for normalized_losses",xlab= "Normalized Losses",xlim = c(40,275), ylab= "Frequency", col= "green",border= "black")
hist(wheel_base, main= "Histogram for wheel_base",xlab= "wheel base", ylab= "Frequency", col= "skyblue",border= "black")
hist(curb_weight,main= "Histogram for curb_weight",xlab= "Curb Weight", ylab= "Frequency", col= rainbow(1),border= "black")
hist(length, main= "Histogram for length",xlab= "length", ylab= "Frequency", col= "seagreen",border= "black")
hist(width, main= "Histogram for width",xlab= "width", ylab= "Frequency", col= "red",border= "black")
hist(height, main= "Histogram for width",xlab= "width", ylab= "Frequency", col= "orange",border= "black")
hist(engine_size, main= "Histogram for Engine Size",xlab= "width", ylab= "Frequency", col= "orange",border= "black")
bore_num <- as.numeric(autoMobile$bore)
hist(bore_num, main= "Histogram for Bore",xlab= "bore", ylab= "Frequency", col= "blue",border= "black")
horsepower_num <- as.numeric(autoMobile$horsepower)
hist(horsepower_num, main= "Histogram for Horsepower",xlab= "horsepower", ylab= "Frequency", col= "purple",border= "black")
stroke_num <- as.numeric(autoMobile$stroke)
hist(stroke_num, main= "Histogram for stroke",xlab= "stroke", ylab= "Frequency", col= "green",border= "black")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(moments)
library(repr)
library(corrplot)
library(dplyr)
library(purrr)
library(car)
colNames <- c("symboling",
"normalized_losses",
"make",
"fuel_type",
"aspiration",
"num_of_doors",
"body_style",
"drive_wheels",
"engine_location",
"wheel_base",
"length",
"width",
"height",
"curb_weight",
"engine_type",
"num_of_cylinders",
"engine_size",
"fuel_system",
"bore",
"stroke",
"compression_ratio",
"horsepower",
"peak_rpm",
"city_mpg",
"highway_mpg",
"price")
autoMobile <- read.csv("../Data/Automobile_data.csv", header = TRUE, col.names = colNames)
attach(autoMobile)
head(autoMobile)
autoMobile[autoMobile == '?'] <- NA
head(autoMobile)
glimpse(autoMobile)
sum(is.na(autoMobile))
NAsByFeature <- apply(autoMobile, 2,
function(x){
length(which(is.na(x)))
}
)
NAsByFeature
# Calculate the average of normalized-losses
avg_norm_loss <- mean(as.numeric(autoMobile[["normalized_losses"]]), na.rm = TRUE)
# Print the average of normalized-losses
cat("Average of normalized-losses:", avg_norm_loss, "\n")
# Replace missing values in normalized-losses with the average
autoMobile[["normalized_losses"]][is.na(autoMobile[["normalized_losses"]])] <- avg_norm_loss
head(autoMobile,10)
sum(duplicated(autoMobile))
glimpse(autoMobile)
autoMobile <- autoMobile %>%
na.omit()
NAsByFeature <- sapply(autoMobile, function(x) sum(is.na(x)))
NAsByFeature
glimpse(autoMobile)
factorCols = c('make',
'fuel_type',
'aspiration',
'num_of_doors',
'body_style',
'drive_wheels',
'engine_location',
'engine_type',
'num_of_cylinders',
'fuel_system'
)
intCols =c('horsepower',
'symboling',
'normalized_losses',
'curb_weight',
'engine_size',
'city_mpg',
'highway_mpg'
)
numCols = c('bore',
'stroke',
'compression_ratio',
'peak_rpm',
'price',
'wheel_base',
'length',
'width',
'height')
autoMobile <- autoMobile %>%
mutate_at(factorCols, as.factor) %>%
mutate_at(intCols, as.integer) %>%
mutate_at(numCols, as.numeric)
str(autoMobile)
#dealing with the duplicate data
sum(duplicated(autoMobile))
horsepowerTable <- table(autoMobile[['horsepower']])
hist(autoMobile$horsepower, col = topo.colors(length(horsepowerTable)), border = "black",
xlab = "Horsepower", ylab = "Count", main = "Histogram of HORSEPOWER")
str(autoMobile)
summary(autoMobile)
hist(symboling,main= "Histogram for symboling",xlab= "Symboling",ylab= "Frequency", col= "gold",border= "black")
norm_loss <- as.numeric(normalized_losses)
hist(norm_loss, main= "Histogram for normalized_losses",xlab= "Normalized Losses",xlim = c(40,275), ylab= "Frequency", col= "green",border= "black")
hist(wheel_base, main= "Histogram for wheel_base",xlab= "wheel base", ylab= "Frequency", col= "skyblue",border= "black")
hist(curb_weight,main= "Histogram for curb_weight",xlab= "Curb Weight", ylab= "Frequency", col= rainbow(1),border= "black")
hist(length, main= "Histogram for length",xlab= "length", ylab= "Frequency", col= "seagreen",border= "black")
hist(width, main= "Histogram for width",xlab= "width", ylab= "Frequency", col= "red",border= "black")
hist(height, main= "Histogram for width",xlab= "width", ylab= "Frequency", col= "orange",border= "black")
hist(engine_size, main= "Histogram for Engine Size",xlab= "width", ylab= "Frequency", col= "orange",border= "black")
bore_num <- as.numeric(autoMobile$bore)
hist(bore_num, main= "Histogram for Bore",xlab= "bore", ylab= "Frequency", col= "blue",border= "black")
stroke_num <- as.numeric(autoMobile$stroke)
hist(stroke_num, main= "Histogram for stroke",xlab= "stroke", ylab= "Frequency", col= "green",border= "black")
hist(compression_ratio, main= "Histogram for Compression Ratio",xlab= "compression_ratio", ylab= "Frequency",xlim = c(0, 30), col= "red",border= "black")
peak_rpm_num <- as.numeric(autoMobile$peak_rpm)
hist(peak_rpm_num, main= "Histogram for Peak Rpm",xlab= "peak_rpm", ylab= "Frequency", col= "yellow",border= "black")
hist(city_mpg, main= "Histogram for City mpg",xlab= "city_mpg", ylab= "Frequency", col= "pink",border= "black")
hist(highway_mpg, main= "Histogram for highway_mpg",xlab= "highway_mpg", ylab= "Frequency", col= "brown",border= "black")
price_num <-as.numeric(autoMobile$price)
hist(price_num, main= "Histogram for price",xlab= "price", ylab= "Frequency", col= "gold",border= "black")
skewness_automobile = c(skewness(autoMobile$highway_mpg),
skewness(autoMobile$city_mpg),
skewness(autoMobile$price),
skewness(autoMobile$peak_rpm),
skewness(autoMobile$horsepower),
skewness(autoMobile$compression_ratio),
skewness(autoMobile$bore),
skewness(autoMobile$stroke),
skewness(autoMobile$engine_size),
skewness(autoMobile$height),
skewness(autoMobile$width),
skewness(autoMobile$length),
skewness(autoMobile$wheel_base),
skewness(autoMobile$curb_weight)
)
skew.Names <- c("highway_mpg", "city_mpg" , "price", "peak_rpm", "horsepower",
"compression_ratio","bore","stroke","engine_size",
"height","width","length","wheel_base","curb_weight")
skewnessDF <- data.frame(skew.Names, skewness_automobile)
skewnessDF
par(mfrow = c(2,2))
boxplot(symboling, main= "Boxplot for price", xlab= "price", col= "darkcyan", horizontal = TRUE)
boxplot(highway_mpg, main= "Boxplot for price", xlab= "price", col= "darkorange", horizontal = TRUE)
boxplot(city_mpg, main= "Boxplot for price", xlab= "price", col= "darkred", horizontal = TRUE)
boxplot(price_num, main= "Boxplot for price", xlab= "price", col= "darkblue", horizontal = TRUE)
par(mfrow = c(2,2))
boxplot(symboling, main= "Boxplot for symboling", xlab= "symboling", col= "darkcyan", horizontal = TRUE)
boxplot(highway_mpg, main= "Boxplot for hmpg", xlab= "hmpg", col= "darkorange", horizontal = TRUE)
boxplot(city_mpg, main= "Boxplot for price", xlab= "price", col= "darkred", horizontal = TRUE)
boxplot(price_num, main= "Boxplot for price", xlab= "price", col= "darkblue", horizontal = TRUE)
Make_Tbl <- table(autoMobile$make)
barplot(Make_Tbl, main = "Vehicle Make", xlab = "Brand", ylab = "Count", col = terrain.colors(21), border = "black")
Make_Tbl <- table(autoMobile$make)
Make_Tbl
#barplot(Make_Tbl, main = "Vehicle Make", xlab = "Brand", ylab = "Count", col = terrain.colors(21), border = "black")
Make_Tbl <- table(autoMobile$make)
barplot(Make_Tbl, main = "Vehicle Make", xlab = "Brand", ylab = "Count", col = terrain.colors(21), border = "black")
fuel_type_Tbl <- table(autoMobile$fuel_type)
barplot(fuel_type_Tbl, main = "Fuel Type", xlab = "type", ylab = "Count", col = cm.colors(2),  border = "black")
aspiration_Tbl <- table(autoMobile$aspiration)
barplot(aspiration_Tbl, main = "Aspiration", xlab = "type", ylab = "Count",col = cm.colors(2),  border = "black")
num_of_doors_Tbl <- table(autoMobile$num_of_doors)
barplot(num_of_doors_Tbl, main = "Number Of Doors", xlab = "No_Of_Doors", ylab = "Count", col = heat.colors(2), border = "black")
body_style_Tbl <- table(autoMobile$body_style)
barplot(body_style_Tbl, main = "Body Style", xlab = "style", ylab = "Count",col = terrain.colors(5), border = "black")
drive_wheels_Tbl <- table(autoMobile$drive_wheels)
barplot(drive_wheels_Tbl, main = "Drive Wheels", xlab = "Type", ylab = "Count",col = rainbow(3), border = "black")
engine_location_Tbl <- table(autoMobile$engine_location)
barplot(engine_location_Tbl, main = "Engine Location", xlab = "Location", ylab = "Count",col = rainbow(2),  border = "black")
engine_type_Tbl <- table(autoMobile$engine_type)
barplot(engine_type_Tbl, main = "Engine Type", xlab = "Type", ylab = "Count", col = rainbow(6), border = "black")
num_of_cylinders_Tbl <- table(autoMobile$num_of_cylinders)
barplot(num_of_cylinders_Tbl, main = "Number Of Cylinders", xlab = "Cylinders", ylab = "Count",col = rainbow(6), border = "black")
plot(autoMobile$engine_size, autoMobile$price, main = "Engine Size vs Price",
xlab = "Engine Size", ylab = "Price", col = "red")
lm_fit <- lm(price ~ engine_size, data = autoMobile)
abline(lm_fit, col = "blue")
CorEngineS.P <- cor(autoMobile$engine_size, autoMobile$price)
CorEngineS.P
plot(autoMobile$highway_mpg, autoMobile$price, main = " Highway MPG vs Price",
xlab = "Highway MPG", ylab = "Price", col = "purple")
lm_fit <- lm(price ~ highway_mpg, data = autoMobile)
abline(lm_fit, col = "red")
plot(autoMobile$peak_rpm, autoMobile$price, main = "PEAK RPM vs Price",
xlab = "PEAK RPM", ylab = "Price", col = "red")
lm_fit <- lm(price ~ peak_rpm, data = autoMobile)
abline(lm_fit, col = "blue")
plot(autoMobile$stroke, autoMobile$price, main = "Stroke vs Price",
xlab = "Stroke", ylab = "Price", col = "red")
lm_fit <- lm(price ~ stroke, data = autoMobile)
abline(lm_fit, col = "blue")
boxplot(price ~ body_style, data = autoMobile, col = rainbow(5),
main = "Boxplot: Body Style vs Price",
xlab = "Body Style", ylab = "Price")
boxplot(price ~ engine_location, data = autoMobile, col = cm.colors(1),
main = "Boxplot: Engine Location vs Price",
xlab = "Engine Location", ylab = "Price")
boxplot(price ~ engine_location, data = autoMobile, col = cm.colors(1),
main = "Boxplot: Engine Location vs Price",
xlab = "Engine Location", ylab = "Price")
boxplot(price ~ drive_wheels, data = autoMobile, col = terrain.colors(3),
main = "Boxplot: Drive Wheels vs Price",
xlab = "Drive Wheels", ylab = "Price")
summary(autoMobile)
df_01 <- autoMobile[, c(1, 2, 10, 11, 12, 13, 14, 17,  26)]
df_02 <- autoMobile[, c(19, 20, 21, 22, 23, 24, 25, 26)]
par(mfrow = c(1,2))
pairs(df_01)
pairs(df_02)
df_01 <- autoMobile[, c( 13, 14, 17,  26)]
df_02 <- autoMobile[, c(19, 20, 21, 22, 23, 24, 25, 26)]
par(mfrow = c(1,2))
pairs(df_01)
pairs(df_02)
df_01 <- autoMobile[, c(1, 2, 10, 11, 12, 13, 14, 17,  26)]
df_02 <- autoMobile[, c(19, 20, 21, 22, 23, 24, 25, 26)]
par(mfrow = c(1,2))
pairs(df_01)
pairs(df_02)
# Subset the relevant columns for correlation calculation
correlation_matrix <- cor(autoMobile[, c(1, 2, 10, 11, 12, 13, 14, 17,
19, 20, 21, 22, 23, 24, 25, 26)])
# Create the correlation color plot
corrplot(correlation_matrix, method = "color")
# Calculate the Pearson correlation coefficient and p-value
result_wb <- cor.test(autoMobile$wheel_base, autoMobile$price, method = "pearson")
# Extract the correlation coefficient and p-value
pearson_coef_wb <- result_wb$estimate
p_value_wb <- result_wb$p.value
# Print the results
print(paste("The Pearson Correlation Coefficient is", pearson_coef_wb, "with a P-value of P =", p_value_wb))
# Calculate the Pearson correlation coefficient and p-value
result_wb <- cor.test(autoMobile$wheel_base, autoMobile$price, method = "pearson")
# Extract the correlation coefficient and p-value
pearson_coef_wb <- result_wb$estimate
p_value_wb <- result_wb$p.value
# Print the results
print(paste("The Pearson Correlation Coefficient is", pearson_coef_wb, "with a P-value of P =", p_value_wb))
# Calculate the Pearson correlation coefficient and p-value
result_hp <- cor.test(autoMobile$horsepower, autoMobile$price, method = "pearson")
# Extract the correlation coefficient and p-value
pearson_coef_hp <- result_hp$estimate
p_value_hp <- result_hp$p.value
# Print the results
print(paste("The Pearson Correlation Coefficient is", pearson_coef_hp, "with a P-value of P =", p_value_hp))
# Calculate the Pearson correlation coefficient and p-value
result_L <- cor.test(autoMobile$length, autoMobile$price, method = "pearson")
# Extract the correlation coefficient and p-value
pearson_coef_L <- result_L$estimate
p_value_L <- result_L$p.value
# Print the results
print(paste("The Pearson Correlation Coefficient is", pearson_coef_L, "with a P-value of P =", p_value_L))
# Calculate the Pearson correlation coefficient and p-value
result_Es <- cor.test(autoMobile$engine_size, autoMobile$price, method = "pearson")
# Extract the correlation coefficient and p-value
pearson_coef_Es <- result_Es$estimate
p_value_Es <- result_Es$p.value
# Print the results
print(paste("The Pearson Correlation Coefficient is", pearson_coef_Es, "with a P-value of P =", p_value_Es))
test1 <- chisq.test(make, fuel_type)
test1
test2 <- chisq.test(engine_location, drive_wheels)
test2
F_model <- lm(price ~ ., data = autoMobile)
summary(F_model)
Full_Model <- lm(price ~ peak_rpm + bore + engine_size + curb_weight + engine_location + length + height + width + wheel_base + engine_location + body_style + aspiration + fuel_type + symboling + normalized_losses,
data = autoMobile)
summary(Full_Model)
Full_Model <- lm(price ~ peak_rpm + bore + engine_size + curb_weight + engine_location + length + height + width + wheel_base + engine_location + body_style + aspiration + fuel_type + symboling + normalized_losses,
data = autoMobile)
summary(Full_Model)
#par(mfrow = c(2,2))
plot(Full_Model)
Reduced_Model <- lm(price ~ peak_rpm + engine_size + curb_weight + engine_location + width + engine_location,
data = autoMobile)
summary(Reduced_Model)
Reduced_Model <- lm(price ~ peak_rpm + engine_size + curb_weight + engine_location + width + engine_location,
data = autoMobile)
summary(Reduced_Model)
residuals_RM <- Reduced_Model$residuals
head(residuals_RM, 10)
shapiro.test(residuals_RM)
mean(residuals_RM)
residuals_RM <- Reduced_Model$residuals
head(residuals_RM)
residuals_RM <- Reduced_Model$residuals
head(residuals_RM)
residuals_RM <- Reduced_Model$residuals
residuals_RM
mean(residuals_RM)
predictor_RM <- Reduced_Model$fitted.values
head(predictor_RM)
plot(predictor_RM/1000, residuals_RM/1000, main = "Residuals Vs. Fitted values", xlab = "Fitted values", ylab = "Residuals")
abline(h=0)
#Residuals vs Order
plot(residuals_RM/1000, main = "Residuals Vs. Order", xlab = "Order", ylab = "Residuals")
abline(h=0)
mae = mean(abs(residuals_RM))
mae
rmse = sqrt(mean(residuals_RM^2))
rmse
